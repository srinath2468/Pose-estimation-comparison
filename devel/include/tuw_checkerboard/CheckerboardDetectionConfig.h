//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the tuw_checkerboard package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __tuw_checkerboard__CHECKERBOARDDETECTIONCONFIG_H__
#define __tuw_checkerboard__CHECKERBOARDDETECTIONCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace tuw_checkerboard
{
  class CheckerboardDetectionConfigStatics;

  class CheckerboardDetectionConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(CheckerboardDetectionConfig &config, const CheckerboardDetectionConfig &max, const CheckerboardDetectionConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const CheckerboardDetectionConfig &config1, const CheckerboardDetectionConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, CheckerboardDetectionConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const CheckerboardDetectionConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, CheckerboardDetectionConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const CheckerboardDetectionConfig &config) const = 0;
      virtual void getValue(const CheckerboardDetectionConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T CheckerboardDetectionConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (CheckerboardDetectionConfig::* field);

      virtual void clamp(CheckerboardDetectionConfig &config, const CheckerboardDetectionConfig &max, const CheckerboardDetectionConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const CheckerboardDetectionConfig &config1, const CheckerboardDetectionConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, CheckerboardDetectionConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const CheckerboardDetectionConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, CheckerboardDetectionConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const CheckerboardDetectionConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const CheckerboardDetectionConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, CheckerboardDetectionConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, CheckerboardDetectionConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<CheckerboardDetectionConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(CheckerboardDetectionConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("show_camera_image"==(*_i)->name){show_camera_image = boost::any_cast<bool>(val);}
        if("show_camera_image_waitkey"==(*_i)->name){show_camera_image_waitkey = boost::any_cast<int>(val);}
        if("input_raw"==(*_i)->name){input_raw = boost::any_cast<bool>(val);}
        if("rotate_camera_image_180"==(*_i)->name){rotate_camera_image_180 = boost::any_cast<bool>(val);}
        if("plubish_tf"==(*_i)->name){plubish_tf = boost::any_cast<bool>(val);}
        if("plubish_marker"==(*_i)->name){plubish_marker = boost::any_cast<bool>(val);}
        if("publish_fiducials"==(*_i)->name){publish_fiducials = boost::any_cast<bool>(val);}
        if("publish_pose"==(*_i)->name){publish_pose = boost::any_cast<bool>(val);}
        if("checkerboard_columns"==(*_i)->name){checkerboard_columns = boost::any_cast<int>(val);}
        if("checkerboard_rows"==(*_i)->name){checkerboard_rows = boost::any_cast<int>(val);}
        if("checkerboard_square_size"==(*_i)->name){checkerboard_square_size = boost::any_cast<double>(val);}
        if("checkerboard_min_square_size"==(*_i)->name){checkerboard_min_square_size = boost::any_cast<int>(val);}
        if("adaptive_thresh"==(*_i)->name){adaptive_thresh = boost::any_cast<bool>(val);}
        if("normalize_image"==(*_i)->name){normalize_image = boost::any_cast<bool>(val);}
        if("filter_quads"==(*_i)->name){filter_quads = boost::any_cast<bool>(val);}
        if("fast_check"==(*_i)->name){fast_check = boost::any_cast<bool>(val);}
        if("subpixelfit"==(*_i)->name){subpixelfit = boost::any_cast<bool>(val);}
        if("subpixelfit_window_size"==(*_i)->name){subpixelfit_window_size = boost::any_cast<int>(val);}
      }
    }

    bool show_camera_image;
int show_camera_image_waitkey;
bool input_raw;
bool rotate_camera_image_180;
bool plubish_tf;
bool plubish_marker;
bool publish_fiducials;
bool publish_pose;
int checkerboard_columns;
int checkerboard_rows;
double checkerboard_square_size;
int checkerboard_min_square_size;
bool adaptive_thresh;
bool normalize_image;
bool filter_quads;
bool fast_check;
bool subpixelfit;
int subpixelfit_window_size;

    bool state;
    std::string name;

    
}groups;



//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool show_camera_image;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int show_camera_image_waitkey;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool input_raw;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool rotate_camera_image_180;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool plubish_tf;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool plubish_marker;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool publish_fiducials;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool publish_pose;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int checkerboard_columns;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int checkerboard_rows;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double checkerboard_square_size;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int checkerboard_min_square_size;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool adaptive_thresh;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool normalize_image;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool filter_quads;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool fast_check;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool subpixelfit;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int subpixelfit_window_size;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("CheckerboardDetectionConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const CheckerboardDetectionConfig &__max__ = __getMax__();
      const CheckerboardDetectionConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const CheckerboardDetectionConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const CheckerboardDetectionConfig &__getDefault__();
    static const CheckerboardDetectionConfig &__getMax__();
    static const CheckerboardDetectionConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const CheckerboardDetectionConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void CheckerboardDetectionConfig::ParamDescription<std::string>::clamp(CheckerboardDetectionConfig &config, const CheckerboardDetectionConfig &max, const CheckerboardDetectionConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class CheckerboardDetectionConfigStatics
  {
    friend class CheckerboardDetectionConfig;

    CheckerboardDetectionConfigStatics()
    {
CheckerboardDetectionConfig::GroupDescription<CheckerboardDetectionConfig::DEFAULT, CheckerboardDetectionConfig> Default("Default", "", 0, 0, true, &CheckerboardDetectionConfig::groups);
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.show_camera_image = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.show_camera_image = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.show_camera_image = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("show_camera_image", "bool", 0, "Show camera image", "", &CheckerboardDetectionConfig::show_camera_image)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("show_camera_image", "bool", 0, "Show camera image", "", &CheckerboardDetectionConfig::show_camera_image)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.show_camera_image_waitkey = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.show_camera_image_waitkey = 1000;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.show_camera_image_waitkey = 2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("show_camera_image_waitkey", "int", 0, "Time to draw the camera image in ms", "", &CheckerboardDetectionConfig::show_camera_image_waitkey)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("show_camera_image_waitkey", "int", 0, "Time to draw the camera image in ms", "", &CheckerboardDetectionConfig::show_camera_image_waitkey)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_raw = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_raw = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_raw = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("input_raw", "bool", 0, "the imput image is distored", "", &CheckerboardDetectionConfig::input_raw)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("input_raw", "bool", 0, "the imput image is distored", "", &CheckerboardDetectionConfig::input_raw)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.rotate_camera_image_180 = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.rotate_camera_image_180 = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.rotate_camera_image_180 = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("rotate_camera_image_180", "bool", 0, "Rotate input camera image by 180 deg", "", &CheckerboardDetectionConfig::rotate_camera_image_180)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("rotate_camera_image_180", "bool", 0, "Rotate input camera image by 180 deg", "", &CheckerboardDetectionConfig::rotate_camera_image_180)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.plubish_tf = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.plubish_tf = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.plubish_tf = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("plubish_tf", "bool", 0, "publish tf messages", "", &CheckerboardDetectionConfig::plubish_tf)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("plubish_tf", "bool", 0, "publish tf messages", "", &CheckerboardDetectionConfig::plubish_tf)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.plubish_marker = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.plubish_marker = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.plubish_marker = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("plubish_marker", "bool", 0, "plublish marker messages", "", &CheckerboardDetectionConfig::plubish_marker)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("plubish_marker", "bool", 0, "plublish marker messages", "", &CheckerboardDetectionConfig::plubish_marker)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.publish_fiducials = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.publish_fiducials = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.publish_fiducials = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("publish_fiducials", "bool", 0, "publish fiducials to allow 3th party pose estimation.", "", &CheckerboardDetectionConfig::publish_fiducials)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("publish_fiducials", "bool", 0, "publish fiducials to allow 3th party pose estimation.", "", &CheckerboardDetectionConfig::publish_fiducials)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.publish_pose = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.publish_pose = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.publish_pose = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("publish_pose", "bool", 0, "publish checkerboard pose", "", &CheckerboardDetectionConfig::publish_pose)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("publish_pose", "bool", 0, "publish checkerboard pose", "", &CheckerboardDetectionConfig::publish_pose)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.checkerboard_columns = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.checkerboard_columns = 20;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.checkerboard_columns = 8;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("checkerboard_columns", "int", 0, "interior number of colomn corners", "", &CheckerboardDetectionConfig::checkerboard_columns)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("checkerboard_columns", "int", 0, "interior number of colomn corners", "", &CheckerboardDetectionConfig::checkerboard_columns)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.checkerboard_rows = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.checkerboard_rows = 20;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.checkerboard_rows = 6;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("checkerboard_rows", "int", 0, "interior number of row corners", "", &CheckerboardDetectionConfig::checkerboard_rows)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("checkerboard_rows", "int", 0, "interior number of row corners", "", &CheckerboardDetectionConfig::checkerboard_rows)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.checkerboard_square_size = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.checkerboard_square_size = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.checkerboard_square_size = 0.03;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<double>("checkerboard_square_size", "double", 0, "checkerboard square size [m]", "", &CheckerboardDetectionConfig::checkerboard_square_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<double>("checkerboard_square_size", "double", 0, "checkerboard square size [m]", "", &CheckerboardDetectionConfig::checkerboard_square_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.checkerboard_min_square_size = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.checkerboard_min_square_size = 100;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.checkerboard_min_square_size = 10;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("checkerboard_min_square_size", "int", 0, "minimal checkerboard square size in [pix] to accept a detection", "", &CheckerboardDetectionConfig::checkerboard_min_square_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("checkerboard_min_square_size", "int", 0, "minimal checkerboard square size in [pix] to accept a detection", "", &CheckerboardDetectionConfig::checkerboard_min_square_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.adaptive_thresh = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.adaptive_thresh = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.adaptive_thresh = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("adaptive_thresh", "bool", 0, "checkerboard detection flags", "", &CheckerboardDetectionConfig::adaptive_thresh)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("adaptive_thresh", "bool", 0, "checkerboard detection flags", "", &CheckerboardDetectionConfig::adaptive_thresh)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.normalize_image = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.normalize_image = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.normalize_image = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("normalize_image", "bool", 0, "checkerboard detection flags", "", &CheckerboardDetectionConfig::normalize_image)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("normalize_image", "bool", 0, "checkerboard detection flags", "", &CheckerboardDetectionConfig::normalize_image)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.filter_quads = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.filter_quads = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.filter_quads = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("filter_quads", "bool", 0, "checkerboard detection flags", "", &CheckerboardDetectionConfig::filter_quads)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("filter_quads", "bool", 0, "checkerboard detection flags", "", &CheckerboardDetectionConfig::filter_quads)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.fast_check = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.fast_check = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.fast_check = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("fast_check", "bool", 0, "checkerboard detection flags", "", &CheckerboardDetectionConfig::fast_check)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("fast_check", "bool", 0, "checkerboard detection flags", "", &CheckerboardDetectionConfig::fast_check)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.subpixelfit = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.subpixelfit = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.subpixelfit = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("subpixelfit", "bool", 0, "Sub-pixel accurate corner locator", "", &CheckerboardDetectionConfig::subpixelfit)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<bool>("subpixelfit", "bool", 0, "Sub-pixel accurate corner locator", "", &CheckerboardDetectionConfig::subpixelfit)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.subpixelfit_window_size = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.subpixelfit_window_size = 20;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.subpixelfit_window_size = 8;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("subpixelfit_window_size", "int", 0, "Half of the side length of the search window [pix]", "", &CheckerboardDetectionConfig::subpixelfit_window_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr(new CheckerboardDetectionConfig::ParamDescription<int>("subpixelfit_window_size", "int", 0, "Half of the side length of the search window [pix]", "", &CheckerboardDetectionConfig::subpixelfit_window_size)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(CheckerboardDetectionConfig::AbstractGroupDescriptionConstPtr(new CheckerboardDetectionConfig::GroupDescription<CheckerboardDetectionConfig::DEFAULT, CheckerboardDetectionConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<CheckerboardDetectionConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<CheckerboardDetectionConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    CheckerboardDetectionConfig __max__;
    CheckerboardDetectionConfig __min__;
    CheckerboardDetectionConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const CheckerboardDetectionConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static CheckerboardDetectionConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &CheckerboardDetectionConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const CheckerboardDetectionConfig &CheckerboardDetectionConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const CheckerboardDetectionConfig &CheckerboardDetectionConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const CheckerboardDetectionConfig &CheckerboardDetectionConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<CheckerboardDetectionConfig::AbstractParamDescriptionConstPtr> &CheckerboardDetectionConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<CheckerboardDetectionConfig::AbstractGroupDescriptionConstPtr> &CheckerboardDetectionConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const CheckerboardDetectionConfigStatics *CheckerboardDetectionConfig::__get_statics__()
  {
    const static CheckerboardDetectionConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = CheckerboardDetectionConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __CHECKERBOARDDETECTIONRECONFIGURATOR_H__
